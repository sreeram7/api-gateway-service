##In EC2 instance open this port in inbound with myIP as option)
#server.port=8010
#
#spring.application.name=api-gateway
#
## While running the API gate way server from docker pass this as parameter with -e option with private IP of EC2 instance in localhost place
## Note: Open the inbound port in ec2 with 8083
#eureka.client.serviceUrl.defaultZone=http://localhost:8083/eureka
#
##Automated Way of Routes : Enable below properties
##spring.cloud.gateway.discovery.locator.enabled=true
##spring.cloud.gateway.discovery.locator.lower-case-service-id=true
#
##manual way of mapping
#spring.cloud.gateway.routes[0].id=hello-service
#spring.cloud.gateway.routes[0].uri=lb://hello-service1
#spring.cloud.gateway.routes[0].predicates[0]=Path=/hello-service1/service1/**
#spring.cloud.gateway.routes[0].predicates[1]=Method=GET,POST,PUT,DELETE
#spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
#spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
#spring.cloud.gateway.routes[0].filters[1]=RewritePath=/hello-service1/(?<segment>.*), /$\{segment}
#spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter
#
##HTTPS SSL CERT Configuration
## The format used for the keystore. It could be set to JKS in case it is a JKS file
#server.ssl.key-store-type=PKCS12
## The path to the keystore containing the certificate
#server.ssl.key-store=classpath:keystore/singteltest.p12
## The password used to generate the certificate
#server.ssl.key-store-password=changeIt
## The alias mapped to the certificate
#server.ssl.key-alias=singteltest
##Enable SSL
#server.ssl.enabled=true
#
##Don't use below in production for production : For production you can use lb:// , spring.cloud.gateway.httpclient.ssl.trusted-x509-certificates= cert.pem
#spring.cloud.gateway.httpclient.ssl.useInsecureTrustManager=true
##Jwt Token
#token.secret=changeIt